import logging
import os
import json
import re
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler, CallbackQueryHandler
from db import SessionLocal, init_db, User, Parcel
from tracker import login_and_get_shipments
from sqlalchemy.exc import IntegrityError
from thefuzz import process, fuzz
import pymorphy2
from datetime import datetime
from functools import wraps

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BASE = os.getenv("BOT_BASE_URL", "https://boxberry.ru")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

REGISTER_LOGIN, REGISTER_PASSWORD, REGISTER_NAME, REGISTER_SURNAME = range(4)
LOGIN_LOGIN, LOGIN_PASSWORD = range(4, 6)
ADD_TRACKING = 6
CHANGE_OLD_PASSWORD, CHANGE_NEW_PASSWORD = range(7, 9)
CALC_COUNTRY, CALC_CITY, CALC_WEIGHT = range(9, 12)

with open("keywords_mapping.json", "r", encoding="utf-8") as f:
    KEYWORDS = json.load(f)

with open("price_matrix.json", "r", encoding="utf-8") as f:
    PRICE_MATRIX = json.load(f)["countries"]

with open("restrictions.json", "r", encoding="utf-8") as f:
    BXBOX_RESTRICTIONS = json.load(f)["countries"]

morph = pymorphy2.MorphAnalyzer()
TRACKING_PATTERN = re.compile(r'^[A-Z0-9\-]{8,}$')

def session_handler(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        session = SessionLocal()
        try:
            return await func(session, *args, **kwargs)
        except Exception as e:
            logger.error(f"Database error: {e}")
            session.rollback()
        finally:
            session.close()
    return wrapper

def db_get_or_create_user(session, telegram_id, username=None):
    user = session.query(User).filter_by(telegram_id=telegram_id).first()
    if user: return user
    user = User(telegram_id=telegram_id, username=username)
    session.add(user)
    session.commit()
    return user

async def send_tracking_info(update: Update, context: ContextTypes.DEFAULT_TYPE, tracking_number, additional_text=""):
    tracking_url = f"{BASE}/tracking-page?id={tracking_number}"
    keyboard = [[InlineKeyboardButton("üîç –û—Ç—Å–ª–µ–¥–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url=tracking_url)]]
    message_text = f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: `{tracking_number}`{additional_text}"
    
    if 'last_tracking_message_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['last_tracking_message_id'])
        except Exception as e:
            logger.warning(f"Failed to delete message: {e}")
            
    try:
        msg = await (update.message or update.callback_query.message).reply_text(
            messageomanip            message_text, 
            reply_markup=InlineKeyboardMarkup(keyboard), 
            parse_mode='Markdown'
        )
        context.user_data['last_tracking_message_id'] = msg.message_id
    except Exception as e:
        logger.error(f"Failed to send tracking info: {e}")

def get_main_menu_keyboard():
    keyboard = [
        ["üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏"],
        ["üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üìã BxBox –ü—Ä–∞–≤–∏–ª–∞"],
        ["üåç –°–ù–ì —Å—Ç—Ä–∞–Ω—ã", "üé´ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç"],
        ["‚ùì –ü–æ–º–æ—â—å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_profile_keyboard():
    keyboard = [
        ["üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å"],
        ["üìã –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    try:
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        if user and user.first_name:
            text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
            await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())
        else:
            text = ("üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Boxberry Bot!\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
                    "üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—ã–ª–∫–∏\n"
                    "üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
                    "‚ùì –ü–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏:")
            keyboard = [
                [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
                [InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data="login")],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="help_guest")]
            ]
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"Error in start: {e}")
    finally:
        session.close()

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = ("‚ùì **–ü–æ–º–æ—â—å –ø–æ Boxberry Bot**\n\n"
                "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "`C–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?`\n"
                "`K–∞–∫ —É–ø–∞–∫–æ–≤–∞—Ç—å –ø–æ—Å—ã–ª–∫—É?`\n\n"
                "**–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:**")
        keyboard = [[
            InlineKeyboardButton("üìö –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)", url="https://boxberry.ru/faq/chastnym-klientam-voprosy-i-otvety"),
            InlineKeyboardButton("‚òéÔ∏è –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://boxberry.ru/kontakty")
        ]]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error in help_cmd: {e}")

async def register_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (email):", reply_markup=ReplyKeyboardRemove())
        return REGISTER_LOGIN
    except Exception as e:
        logger.error(f"Error in register_cmd: {e}")
        return ConversationHandler.END

@session_handler
async def register_login_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    login = update.message.text.strip()
    if len(login) < 5 or "@" not in login:
        await update.message.reply_text("‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email –∞–¥—Ä–µ—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return REGISTER_LOGIN
    existing_user = session.query(User).filter_by(login=login).first()
    if existing_user:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /login.")
        return ConversationHandler.END
    context.user_data['reg_login'] = login
    await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    return REGISTER_PASSWORD

@session_handler
async def register_password_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text.strip()
    if len(password) < 6:
        await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return REGISTER_PASSWORD
    context.user_data['reg_password'] = password
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return REGISTER_NAME

@session_handler
async def register_name_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['reg_first'] = update.message.text.strip()
    await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return REGISTER_SURNAME

@session_handler
async def register_surname_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    try:
        user = db_get_or_create_user(session, update.effective_user.id, update.effective_user.username)
        user.login = data['reg_login']
        user.password = data['reg_password']
        user.first_name = data['reg_first']
        user.last_name = update.message.text.strip()
        session.add(user)
        session.commit()
        text = (f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üë§ –ò–º—è: {user.first_name} {user.last_name}\n"
                f"üìß –õ–æ–≥–∏–Ω: {user.login}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!")
        await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())
    except IntegrityError:
        session.rollback()
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"Error in register_surname_received: {e}")
    context.user_data.clear()
    return ConversationHandler.END

async def login_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üîë –í—Ö–æ–¥\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (email):", reply_markup=ReplyKeyboardRemove())
        return LOGIN_LOGIN
    except Exception as e:
        logger.error(f"Error in login_cmd: {e}")
        return ConversationHandler.END

@session_handler
async def login_login_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['login_login'] = update.message.text.strip()
    await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD

@session_handler
async def login_password_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    login_text = context.user_data.get('login_login')
    password_text = update.message.text.strip()
    user = session.query(User).filter_by(login=login_text, password=password_text).first()
    if not user:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /register.",
            reply_markup=get_main_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END
    user.telegram_id = update.effective_user.id
    user.username = update.effective_user.username
    session.commit()
    text = f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\nüë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!"
    await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())
    context.user_data.clear()
    return ConversationHandler.END

@session_handler
async def profile_cmd(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user or not user.login:
        await update.message.reply_text("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –∏–ª–∏ /login.", reply_markup=get_main_menu_keyboard())
        return

    text = (f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"**–ò–º—è:** {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} {user.last_name or ''}\n"
            f"**–õ–æ–≥–∏–Ω:** `{user.login}`")
    await update.message.reply_text(text, reply_markup=get_profile_keyboard(), parse_mode='Markdown')

async def change_password_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å:", reply_markup=ReplyKeyboardRemove())
    return CHANGE_OLD_PASSWORD

@session_handler
async def change_old_password_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    old_password = update.message.text.strip()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user or user.password != old_password:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CHANGE_OLD_PASSWORD
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    return CHANGE_NEW_PASSWORD

@session_handler
async def change_new_password_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_password = update.message.text.strip()
    if len(new_password) < 6:
        await update.message.reply_text("‚ùå –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return CHANGE_NEW_PASSWORD
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    user.password = new_password
    session.commit()
    await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=get_profile_keyboard())
    return ConversationHandler.END

async def get_my_parcels_content(session, user):
    parcels = session.query(Parcel).filter_by(user_id=user.id).all()
    if not parcels:
        text = ("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é.")
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä", callback_data="add_new_tracking")]]
    else:
        text = f"üì¶ –í–∞—à–∏ –ø–æ—Å—ã–ª–∫–∏ ({len(parcels)}):\n\n"
        keyboard = []
        for i, parcel in enumerate(parcels, 1):
            status = parcel.last_status or "–°—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            text += f"**{i}.** `{parcel.tracking_number}`\n"
            text += f" üìä _{status}_\n\n"
            keyboard.append([
                InlineKeyboardButton(f"üîç {parcel.tracking_number}", callback_data=f"track_{parcel.tracking_number}")
            ])
        keyboard.append([
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="start_delete"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π", callback_data="add_new_tracking")
        ])
    return text, InlineKeyboardMarkup(keyboard)

@session_handler
async def my_parcels_cmd(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user or not user.login:
        keyboard = [[
            InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"),
            InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data="login")
        ]]
        await update.message.reply_text(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—ã–ª–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    if 'my_parcels_message_id' in context.user_data:
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['my_parcels_message_id'])
        except Exception: pass
    if 'last_tracking_message_id' in context.user_data:
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['last_tracking_message_id'])
        except Exception: pass

    text, reply_markup = await get_my_parcels_content(session, user)
    message = await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    context.user_data['my_parcels_message_id'] = message.message_id

@session_handler
async def add_tracking_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip().upper()
    if not TRACKING_PATTERN.match(code):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return ADD_TRACKING
        
    user = db_get_or_create_user(session, update.effective_user.id)
    exists = session.query(Parcel).filter_by(user_id=user.id, tracking_number=code).first()
    
    if not exists:
        p = Parcel(user_id=user.id, tracking_number=code, last_status="–î–æ–±–∞–≤–ª–µ–Ω–æ", created_at=datetime.utcnow())
        session.add(p)
        session.commit()

    if 'add_prompt_id' in context.user_data:
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['add_prompt_id'])
        except Exception: pass
    try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
    except Exception: pass

    await my_parcels_cmd(update, context)
    return ConversationHandler.END

@session_handler
async def start_delete_menu(session, query, context):
    user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
    if not user:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    parcels = session.query(Parcel).filter_by(user_id=user.id).all()
    if not parcels:
        await query.answer("–ù–µ—Ç –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return

    keyboard = []
    for parcel in parcels:
        keyboard.append([InlineKeyboardButton(f"‚ùå {parcel.tracking_number}", callback_data=f"del_{parcel.tracking_number}")])
    keyboard.append([InlineKeyboardButton("üî•üî•üî• –£–¥–∞–ª–∏—Ç—å –í–°–ï", callback_data="del_all")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_parcels")])
    
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

@session_handler
async def handle_delete(session, query, context, tracking=None, all=False):
    user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
    if not user:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    if all:
        deleted_count = session.query(Parcel).filter_by(user_id=user.id).delete()
        session.commit()
        await query.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –ø–æ—Å—ã–ª–æ–∫!", show_alert=True)
    elif tracking:
        parcel = session.query(Parcel).filter_by(user_id=user.id, tracking_number=tracking).first()
        if parcel:
            session.delete(parcel)
            session.commit()
            await query.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        else:
            await query.answer("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
    
    text, reply_markup = await get_my_parcels_content(session, user)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def bxbox_rules_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–®–ê", callback_data="rule_USA"), InlineKeyboardButton("–ö–∏—Ç–∞–π", callback_data="rule_China")],
        [InlineKeyboardButton("–ì–µ—Ä–º–∞–Ω–∏—è", callback_data="rule_Germany"), InlineKeyboardButton("–ò—Å–ø–∞–Ω–∏—è", callback_data="rule_Spain")],
        [InlineKeyboardButton("–ò–Ω–¥–∏—è", callback_data="rule_India")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard))

async def bxbox_rules_country_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    country_code = query.data.split("_", 1)[1]
    rules = BXBOX_RESTRICTIONS.get(country_code)
    if not rules:
        await query.edit_message_text("‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    text = f"üìã **–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ {country_code}**\n\n"
    for category, details in rules["categories"].items():
        text += f"**{category}**\n"
        if details.get("standard"):
            text += "üöö **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:**\n" + "\n".join(details["standard"]) + "\n"
        if details.get("alternative"):
            text += "‚úàÔ∏è **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:**\n" + "\n".join(details["alternative"]) + "\n"
        if details.get("restricted"):
            text += "‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n" + "\n".join(details["restricted"]) + "\n"
        if details.get("prohibited"):
            text += "üö´ **–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∫ –ø–µ—Ä–µ—Å—ã–ª–∫–µ:**\n" + "\n".join(details["prohibited"]) + "\n"
        if details.get("details_link"):
            text += f"[üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ]({details['details_link']})\n\n"
    
    text += f"üìè **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n"
    text += f"‚Ä¢ –í–µ—Å: *{rules.get('max_weight', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}*\n"
    text += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: *{rules.get('max_dimensions', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}*"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_rules")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown', disable_web_page_preview=True)

async def back_to_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–°–®–ê", callback_data="rule_USA"), InlineKeyboardButton("–ö–∏—Ç–∞–π", callback_data="rule_China")],
        [InlineKeyboardButton("–ì–µ—Ä–º–∞–Ω–∏—è", callback_data="rule_Germany"), InlineKeyboardButton("–ò—Å–ø–∞–Ω–∏—è", callback_data="rule_Spain")],
        [InlineKeyboardButton("–ò–Ω–¥–∏—è", callback_data="rule_India")]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard))

async def create_ticket_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("üé´ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è (—Ç–∏–∫–µ—Ç–æ–≤) –∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∫—É–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç.")
    kb = [[InlineKeyboardButton("üìù –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ", url="https://bxbox.bxb.delivery/ru/new-ticket/2")]]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb))

async def calculator_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    countries = list(PRICE_MATRIX.keys())
    keyboard = [[InlineKeyboardButton(country, callback_data=f"calc_country_{country}")] for country in countries]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="calc_cancel")])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CALC_COUNTRY

async def calculator_country_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    country = query.data.replace("calc_country_", "")
    context.user_data['calc_country'] = country
    cities = list(PRICE_MATRIX[country]["cities"].keys())
    kb = [[InlineKeyboardButton(city, callback_data=f"calc_city_{city}")] for city in cities]
    kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="calc_back_country"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="calc_cancel")])
    await query.edit_message_text(f"–°—Ç—Ä–∞–Ω–∞: {country}\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=InlineKeyboardMarkup(kb))
    return CALC_CITY

async def calculator_city_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    city = query.data.replace("calc_city_", "")
    context.user_data['calc_city'] = city
    await query.edit_message_text(f"–ì–æ—Ä–æ–¥: {city}\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):")
    return CALC_WEIGHT

async def calculator_weight_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight_text = update.message.text.strip().replace(',', '.')
        w = float(weight_text)
        if not (0 < w <= 31.5):
            await update.message.reply_text("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 31.5 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return CALC_WEIGHT
        country = context.user_data.get('calc_country')
        city = context.user_data.get('calc_city')
        price_data = PRICE_MATRIX.get(country, {}).get("cities", {}).get(city, {}).get("weights", {})
        price = None
        if w <= 1: price = price_data.get("0-1")
        elif w <= 5: price = price_data.get("1-5")
        elif w <= 10: price = price_data.get("5-10")
        elif w <= 20: price = price_data.get("10-20")
        elif w <= 31.5: price = price_data.get("20-31.5")

        if price is None:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            days = PRICE_MATRIX[country]["cities"][city].get("delivery_days", "N/A")
            await update.message.reply_text(
                f"**–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏**\n\n"
                f"üåç **–ú–∞—Ä—à—Ä—É—Ç:** {country} ‚Üí {city}\n"
                f"‚öñÔ∏è **–í–µ—Å:** {w} –∫–≥\n"
                f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** *{price} —Ä—É–±.*\n"
                f"‚è≥ **–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫:** {days} –¥–Ω–µ–π",
                parse_mode='Markdown'
            )
    except (ValueError, KeyError) as e:
        logger.error(f"Error in calculator_weight_received: {e}")
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5.5")
        return CALC_WEIGHT
    context.user_data.clear()
    return ConversationHandler.END

def normalize_text(text: str) -> str:
    words = re.findall(r'\w+', text.lower())
    return ' '.join([morph.parse(word)[0].normal_form for word in words])

@session_handler
async def keyword_handler(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    
    if TRACKING_PATTERN.match(user_input.upper()):
        tracking_number = user_input.upper()
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        additional_text = ""
        if user and user.login:
            exists = session.query(Parcel).filter_by(user_id=user.id, tracking_number=tracking_number).first()
            if not exists:
                p = Parcel(user_id=user.id, tracking_number=tracking_number, last_status="–î–æ–±–∞–≤–ª–µ–Ω–æ")
                session.add(p)
                session.commit()
                additional_text = "\n\n‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ '–ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏'!"
            else:
                additional_text = "\n\n‚ÑπÔ∏è –≠—Ç–æ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ."
        else:
            additional_text = "\n\nüí° –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞."

        await send_tracking_info(update, context, tracking_number, additional_text)
        return

    normalized_input = normalize_text(user_input)
    choices = {normalize_text(f"{key} {' '.join(data.get('keywords', []))}"): key for key, data in KEYWORDS.items()}
    results = process.extract(normalized_input, choices.keys(), limit=3, scorer=fuzz.token_set_ratio)
    best_match, best_score = results[0]

    if best_score > 70:
        key = choices[best_match]
        meta = KEYWORDS[key]
        text = meta.get("text", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        kb = [[InlineKeyboardButton("üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ", url=meta.get("link"))]] if meta.get("link") else None
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb) if kb else None)
    else:
        keyboard = []
        for match, score in results:
            if score > 45:
                key = choices[match]
                button_text = f"‚ùì {key.capitalize()}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"kw_{key}")])
        
        if keyboard:
            await update.message.reply_text("ü§î –Ø –Ω–µ —Å–æ–≤—Å–µ–º —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.")

async def keyword_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    key = query.data.split('_', 1)[1]
    if key in KEYWORDS:
        meta = KEYWORDS[key]
        text = meta.get("text", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        kb = [[InlineKeyboardButton("üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ", url=meta.get("link"))]] if meta.get("link") else None
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb) if kb else None)

@session_handler
async def button_handler(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "register":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (email):", reply_markup=ReplyKeyboardRemove())
        context.application.create_task(register_cmd(query.message, context))
    elif data == "login":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (email):", reply_markup=ReplyKeyboardRemove())
        context.application.create_task(login_cmd(query.message, context))
    elif data == "help_guest":
        await help_cmd(query.message, context)

    elif data == "add_new_tracking":
        prompt_msg = await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        context.user_data['add_prompt_id'] = prompt_msg.message_id
    elif data.startswith("track_"):
        tracking_id = data.split("_", 1)[1]
        await send_tracking_info(update, context, tracking_id)
    elif data == "start_delete":
        await start_delete_menu(query, context)
    elif data == "back_to_parcels":
        user = db_get_or_create_user(session, query.from_user.id)
        text, markup = await get_my_parcels_content(session, user)
        await query.edit_message_text(text, reply_markup=markup, parse_mode='Markdown')
    elif data.startswith("del_"):
        if data == "del_all":
            await handle_delete(query, context, all=True)
        else:
            tracking_id = data.split("_", 1)[1]
            await handle_delete(query, context, tracking=tracking_id)
            
async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏": await my_parcels_cmd(update, context)
    elif text == "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": await calculator_start(update, context)
    elif text == "üìã BxBox –ü—Ä–∞–≤–∏–ª–∞": await bxbox_rules_cmd(update, context)
    elif text == "üé´ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç": await create_ticket_cmd(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å": await help_cmd(update, context)
    elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å": await profile_cmd(update, context)
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    elif text == "üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å": await change_password_start(update, context)
    elif text == "üåç –°–ù–ì —Å—Ç—Ä–∞–Ω—ã":
        text_response = KEYWORDS.get("–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", {}).get("text", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.")
        link = KEYWORDS.get("–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", {}).get("link", "https://boxberry.ru")
        await update.message.reply_text(
            f"üåç –î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì\n\n{text_response}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ", url=link)]])
        )
    elif text == "üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å":
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ –ø–æ—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫—É—Ä—å–µ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏", url="https://boxberry.ru/faq/chastnym-klientam-voprosy-i-otvety/kak-pereadresovat-posylku-na-drugoi-punkt-vydachi-boxberry")]])
        )
    else:
        await keyword_handler(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_keyboard())
    context.user_data.clear()
    return ConversationHandler.END

def main():
    init_db()
    if not TELEGRAM_TOKEN:
        raise ValueError("TELEGRAM_TOKEN –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    reg_conv = ConversationHandler(
        entry_points=[CommandHandler('register', register_cmd), CallbackQueryHandler(register_cmd, pattern="^register$")],
        states={
            REGISTER_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_login_received)],
            REGISTER_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_password_received)],
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name_received)],
            REGISTER_SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_surname_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)], per_user=True
    )

    login_conv = ConversationHandler(
        entry_points=[CommandHandler('login', login_cmd), CallbackQueryHandler(login_cmd, pattern="^login$")],
        states={
            LOGIN_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_login_received)],
            LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)], per_user=True
    )
    
    add_tracking_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^add_new_tracking$")],
        states={ADD_TRACKING: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_tracking_received)]},
        fallbacks=[CommandHandler('cancel', cancel)], per_user=True
    )
    
    change_password_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'^üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å$'), change_password_start)],
        states={
            CHANGE_OLD_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_old_password_received)],
            CHANGE_NEW_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_new_password_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)], per_user=True
    )
    
    calc_conv = ConversationHandler(
        entry_points=[CommandHandler('calculator', calculator_start), MessageHandler(filters.Regex(r'^üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä$'), calculator_start)],
        states={
            CALC_COUNTRY: [CallbackQueryHandler(calculator_country_selected, pattern="^calc_country_")],
            CALC_CITY: [CallbackQueryHandler(calculator_city_selected, pattern="^calc_city_")],
            CALC_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculator_weight_received)]
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern="^calc_cancel$"), CommandHandler('cancel', cancel)], per_user=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("profile", profile_cmd))
    app.add_handler(CommandHandler("myparcels", my_parcels_cmd))
    
    app.add_handler(reg_conv)
    app.add_handler(login_conv)
    app.add_handler(add_tracking_conv)
    app.add_handler(change_password_conv)
    app.add_handler(calc_conv)
    
    app.add_handler(CallbackQueryHandler(keyword_callback_handler, pattern=r"^kw_"))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CallbackQueryHandler(bxbox_rules_country_selected, pattern="^rule_"))
    app.add_handler(CallbackQueryHandler(back_to_rules, pattern="^back_to_rules$"))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_selection))

    print("Boxberry Hybrid Bot –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()