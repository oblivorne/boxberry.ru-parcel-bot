import logging
import os
import json
import re
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler, CallbackQueryHandler
from db import SessionLocal, init_db, User, Parcel
from tracker import login_and_get_shipments
from sqlalchemy.exc import IntegrityError
from thefuzz import process, fuzz
import pymorphy2
from datetime import datetime
from functools import wraps
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BASE = os.getenv("BOT_BASE_URL", "https://boxberry.ru")
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
REGISTER_LOGIN, REGISTER_PASSWORD, REGISTER_NAME, REGISTER_SURNAME = range(4)
LOGIN_LOGIN, LOGIN_PASSWORD = range(4, 6)
ADD_TRACKING = 6
CHANGE_OLD_PASSWORD, CHANGE_NEW_PASSWORD = range(7, 9)
with open("keywords_mapping.json", "r", encoding="utf-8") as f:
    KEYWORDS = json.load(f)
morph = pymorphy2.MorphAnalyzer()
TRACKING_PATTERN = re.compile(r'^[A-Z0-9\-]{8,}$')
def session_handler(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        session = SessionLocal()
        try:
            return await func(session, *args, **kwargs)
        finally:
            session.close()
    return wrapper
def db_get_or_create_user(session, telegram_id, username=None):
    user = session.query(User).filter_by(telegram_id=telegram_id).first()
    if user:
        return user
    user = User(telegram_id=telegram_id, username=username)
    session.add(user)
    session.commit()
    return user
def get_main_menu_keyboard():
    keyboard = [
        ["üì¶ –ü–æ—Å—ã–ª–∫–∏", "üìç –¢—Ä–µ–∫–∏–Ω–≥"],
        ["üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üåç –°–ù–ì —Å—Ç—Ä–∞–Ω—ã"],
        ["‚ùì –ü–æ–º–æ—â—å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
def get_profile_keyboard():
    keyboard = [
        ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", "üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"],
        ["üìã –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    session.close()
   
    if user and user.first_name:
        text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())
    else:
        text = ("üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Boxberry Bot!\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
                "üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—ã–ª–∫–∏\n"
                "üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
                "‚ùì –ü–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:")
        keyboard = [
            [InlineKeyboardButton("üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
            [InlineKeyboardButton("üîë –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="login")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="help_guest")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
   
    if query.data == "register":
        context.user_data.clear()
        await query.message.reply_text("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (–ª—é–±–æ–π email):", reply_markup=ReplyKeyboardRemove())
        return REGISTER_LOGIN
    elif query.data == "login":
        context.user_data.clear()
        await query.message.reply_text("–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (email):", reply_markup=ReplyKeyboardRemove())
        return LOGIN_LOGIN
    elif query.data == "help_guest":
        text = ("‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ Boxberry:\n\n"
                "üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞\n"
                "üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å: –Ω–∞–ø–∏—à–∏—Ç–µ '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'\n"
                "üåç –°–ù–ì —Å—Ç—Ä–∞–Ω—ã: –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–Ω–≥'\n"
                "‚ùì FAQ: –Ω–∞–ø–∏—à–∏—Ç–µ '–≤–æ–ø—Ä–æ—Å—ã'\n\n"
                "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        await query.edit_message_text(text)
    elif query.data.startswith("track_"):
        tracking_id = query.data.split("_", 1)[1]
        tracking_url = f"https://boxberry.ru/tracking-page?id={tracking_id}"
        keyboard = [[InlineKeyboardButton("üîç –û—Ç—Å–ª–µ–¥–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url=tracking_url)]]
        await query.edit_message_text(
            f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: `{tracking_id}`\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    elif query.data == "add_new_tracking":
        context.user_data['my_parcels_message_id'] = query.message.message_id
        prompt_msg = await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
        context.user_data['add_prompt_id'] = prompt_msg.message_id
        return ADD_TRACKING
    elif query.data == "start_delete":
        await start_delete_menu(query, context)
    elif query.data == "del_all":
        await handle_delete(query, context, all=True)
    elif query.data.startswith("del_"):
        tracking_id = query.data.split("_", 1)[1]
        await handle_delete(query, context, tracking=tracking_id)
async def register_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Boxberry Bot\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (email):")
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    return REGISTER_LOGIN
async def register_login_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    login = update.message.text.strip()
    if len(login) < 3:
        await update.message.reply_text("‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞:")
        return REGISTER_LOGIN
    session = SessionLocal()
    existing_user = session.query(User).filter_by(login=login).first()
    session.close()
    if existing_user:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login:")
        return REGISTER_LOGIN
    context.user_data["login"] = login
    await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    return REGISTER_PASSWORD
async def register_password_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text.strip()
    if len(password) < 6:
        await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return REGISTER_PASSWORD
    context.user_data["password"] = password
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return REGISTER_NAME
async def register_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["first_name"] = update.message.text.strip()
    await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return REGISTER_SURNAME
@session_handler
async def register_surname_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["last_name"] = update.message.text.strip()
    try:
        user = db_get_or_create_user(session, update.effective_user.id, update.effective_user.username)
        user.login = context.user_data.get("login")
        user.password = context.user_data.get("password")
        user.first_name = context.user_data.get("first_name")
        user.last_name = context.user_data.get("last_name")
        session.add(user)
        session.commit()
        text = (f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üë§ –ò–º—è: {user.first_name} {user.last_name}\n"
                f"üìß –õ–æ–≥–∏–Ω: {user.login}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!")
        await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())
    except IntegrityError:
        session.rollback()
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    context.user_data.clear()
    return ConversationHandler.END
async def login_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("üîë –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    return LOGIN_LOGIN
async def login_login_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["login"] = update.message.text.strip()
    await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD
@session_handler
async def login_password_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    login = context.user_data.get("login")
    password = update.message.text.strip()
    user = session.query(User).filter_by(login=login, password=password).first()
    if not user:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END
    user.telegram_id = update.effective_user.id
    user.username = update.effective_user.username
    session.commit()
    text = (f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name} {user.last_name}!\n"
            f"üìß –õ–æ–≥–∏–Ω: {user.login}")
    await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())
    context.user_data.clear()
    return ConversationHandler.END
async def send_tracking_response(update, tracking_number, additional_text="", context=None):
    tracking_url = f"https://boxberry.ru/tracking-page?id={tracking_number}"
    keyboard = [[InlineKeyboardButton("üîç –û—Ç—Å–ª–µ–¥–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url=tracking_url)]]
    message = f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: `{tracking_number}`{additional_text}"
    msg = await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    if context:
        context.user_data['tracking_response_id'] = msg.message_id
@session_handler
async def add_tracking_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    tracking_number = update.message.text.strip().upper()
    if not TRACKING_PATTERN.match(tracking_number):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return ADD_TRACKING
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    existing_parcel = session.query(Parcel).filter_by(user_id=user.id, tracking_number=tracking_number).first()
    if existing_parcel:
        await update.message.reply_text(
            f"‚ÑπÔ∏è –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä `{tracking_number}` —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫.",
            parse_mode='Markdown'
        )
    else:
        new_parcel = Parcel(
            user_id=user.id,
            tracking_number=tracking_number,
            last_status="–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
        )
        session.add(new_parcel)
        session.commit()
    if 'my_parcels_message_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['my_parcels_message_id'])
        except:
            pass
    if 'add_prompt_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['add_prompt_id'])
        except:
            pass
    text, reply_markup = await get_my_parcels_content(session, user)
    new_msg = await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup, parse_mode='Markdown')
    context.user_data['my_parcels_message_id'] = new_msg.message_id
    if not existing_parcel:
        await send_tracking_response(update, tracking_number, "\n\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ üìã –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏.", context)
    else:
        await send_tracking_response(update, tracking_number, "\n(—É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ)", context)
    return ConversationHandler.END
async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì¶ –ü–æ—Å—ã–ª–∫–∏":
        await parcel_cmd(update, context)
    elif text == "üìç –¢—Ä–µ–∫–∏–Ω–≥":
        await update.message.reply_text(
            "üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (—Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä).",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîç –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", url="https://boxberry.ru/tracking-page")
            ]])
        )
    elif text == "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        await update.message.reply_text(
            "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n\n"
            "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üßÆ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", url="https://boxberry.ru/#calculator")
            ]])
        )
    elif text == "üåç –°–ù–ì —Å—Ç—Ä–∞–Ω—ã":
        text_response = KEYWORDS.get("–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", {}).get("text", "Boxberry –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω –°–ù–ì. –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –Ω–∞ —Å–∞–π—Ç–µ.")
        await update.message.reply_text(
            f"üåç –î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì\n\n{text_response}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ", url=KEYWORDS.get("–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", {}).get("link", "https://boxberry.ru"))]])
        )
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_cmd(update, context)
    elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await profile_cmd(update, context)
    elif text == "üìã –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏":
        if 'tracking_response_id' in context.user_data:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['tracking_response_id'])
            except:
                pass
        await my_parcels_cmd(update, context)
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    elif text == "üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å":
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ –ø–æ—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫—É—Ä—å–µ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏", url="https://boxberry.ru/faq/chastnym-klientam-voprosy-i-otvety/kak-pereadresovat-posylku-na-drugoi-punkt-vydachi-boxberry")
            ]])
        )
    elif text == "üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å":
        await change_password_start(update, context)
    else:
        await keyword_handler(update, context)
async def change_password_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å:", reply_markup=ReplyKeyboardRemove())
    return CHANGE_OLD_PASSWORD
@session_handler
async def change_old_password_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    old_password = update.message.text.strip()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user or user.password != old_password:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CHANGE_OLD_PASSWORD
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    return CHANGE_NEW_PASSWORD
@session_handler
async def change_new_password_received(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_password = update.message.text.strip()
    if len(new_password) < 6:
        await update.message.reply_text("‚ùå –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return CHANGE_NEW_PASSWORD
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    user.password = new_password
    session.commit()
    await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=get_profile_keyboard())
    return ConversationHandler.END
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("‚ùì **–ü–æ–º–æ—â—å –ø–æ Boxberry Bot**\n\n"
            "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`C–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –ú–∏–Ω—Å–∫?`\n"
            "`K–∞–∫ —É–ø–∞–∫–æ–≤–∞—Ç—å –ø–æ—Å—ã–ª–∫—É?`\n"
            "`M–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞?`\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "üîπ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "üîπ /parcel - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∏ –ø–æ—Å—ã–ª–∫–∏ (–Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)\n"
            "üîπ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "**–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:**")
    keyboard = [[
        InlineKeyboardButton("üìö –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)", url="https://boxberry.ru/faq/chastnym-klientam-voprosy-i-otvety"),
        InlineKeyboardButton("‚òéÔ∏è –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://boxberry.ru/kontakty")
    ]]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
@session_handler
async def profile_cmd(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user or not user.login:
        await update.message.reply_text("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –∏–ª–∏ /login.", reply_markup=get_main_menu_keyboard())
        return
    text = (f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"**–ò–º—è:** {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} {user.last_name or ''}\n"
            f"**–õ–æ–≥–∏–Ω:** `{user.login}`")
    await update.message.reply_text(text, reply_markup=get_profile_keyboard(), parse_mode='Markdown')
@session_handler
async def parcel_cmd(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user or not user.login:
        keyboard = [[
            InlineKeyboardButton("üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"),
            InlineKeyboardButton("üîë –í—Ö–æ–¥", callback_data="login")
        ]]
        await update.message.reply_text(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—ã–ª–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    if 'tracking_response_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['tracking_response_id'])
        except:
            pass
    await my_parcels_cmd(update, context)
async def get_my_parcels_content(session, user):
    parcels = session.query(Parcel).filter_by(user_id=user.id).all()
    if not parcels:
        text = (f"üì¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏.")
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä", callback_data="add_new_tracking")]]
    else:
        text = f"üì¶ –í–∞—à–∏ –ø–æ—Å—ã–ª–∫–∏ ({len(parcels)}):\n\n"
        keyboard = []
        for i, parcel in enumerate(parcels, 1):
            status = parcel.last_status or "–°—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            text += f"**{i}.** `{parcel.tracking_number}`\n"
            text += f" üìä {status}\n\n"
            keyboard.append([
                InlineKeyboardButton(f"üîç {parcel.tracking_number}", callback_data=f"track_{parcel.tracking_number}")
            ])
        keyboard.append([
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="start_delete"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π", callback_data="add_new_tracking")
        ])
    return text, InlineKeyboardMarkup(keyboard)
@session_handler
async def my_parcels_cmd(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    if not user or not user.login:
        await update.message.reply_text(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—ã–ª–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    if 'my_parcels_message_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data['my_parcels_message_id'])
        except:
            pass
    text, reply_markup = await get_my_parcels_content(session, user)
    message = await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    context.user_data['my_parcels_message_id'] = message.message_id
@session_handler
async def start_delete_menu(session, query, context):
    user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
    parcels = session.query(Parcel).filter_by(user_id=user.id).all()
    if not parcels:
        await query.answer("–ù–µ—Ç –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    text = "–ö–∞–∫–æ–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä —É–¥–∞–ª–∏—Ç—å?\n\n"
    keyboard = []
    for i, parcel in enumerate(parcels, 1):
        text += f"{i}. {parcel.tracking_number}\n"
        keyboard.append([InlineKeyboardButton(str(i), callback_data=f"del_{parcel.tracking_number}")])
    keyboard.append([InlineKeyboardButton("–í—Å–µ", callback_data="del_all")])
    try:
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
    except:
        pass
    delete_msg = await context.bot.send_message(chat_id=query.message.chat_id, text=text, reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data['delete_menu_id'] = delete_msg.message_id
def normalize_text(text, morph_analyzer):
    words = re.findall(r'\w+', text.lower())
    return ' '.join([morph_analyzer.parse(word)[0].normal_form for word in words])
@session_handler
async def keyword_handler(session, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if TRACKING_PATTERN.match(user_input.upper()):
        tracking_number = user_input.upper()
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        if user and user.login:
            existing_parcel = session.query(Parcel).filter_by(user_id=user.id, tracking_number=tracking_number).first()
            if not existing_parcel:
                new_parcel = Parcel(
                    user_id=user.id,
                    tracking_number=tracking_number,
                    last_status="–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
                )
                session.add(new_parcel)
                session.commit()
                additional_text = "\n\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìã –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
            else:
                additional_text = "\n(—É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ)"
        else:
            additional_text = "\n\nüí° –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤!"
        await send_tracking_response(update, tracking_number, additional_text, context)
        return
    normalized_input = normalize_text(user_input, morph)
    choices = {}
    key_mapping = {}
    for key, data in KEYWORDS.items():
        normalized_key_text = normalize_text(f"{key} {' '.join(data.get('keywords', []))}", morph)
        choices[normalized_key_text] = normalized_key_text
        key_mapping[normalized_key_text] = key
    best_matches = process.extract(normalized_input, choices, limit=3, scorer=fuzz.token_set_ratio)
    if not best_matches:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    processed_matches = [(match[0], match[1]) for match in best_matches]
    best_match_normalized, best_score = processed_matches[0]
    best_match_key = key_mapping.get(best_match_normalized)
    if not best_match_key:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    MATCH_THRESHOLD = 70
    if best_score >= MATCH_THRESHOLD:
        meta = KEYWORDS[best_match_key]
        keyboard = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", url=meta['link'])]]
        await update.message.reply_text(
            f"‚ÑπÔ∏è {meta['text']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    else:
        text_response = "ü§î –Ø –Ω–µ —Å–æ–≤—Å–µ–º —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤?\n"
        keyboard = []
        for normalized_text, score in processed_matches:
            if score > 40:
                original_key = key_mapping.get(normalized_text)
                if original_key:
                    button_text = f"‚ùì {original_key.capitalize()}"
                    callback_data = f"kw_{original_key}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        if not keyboard:
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await update.message.reply_text(text_response, reply_markup=InlineKeyboardMarkup(keyboard))
async def keyword_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    key = query.data.split('_', 1)[1]
    if key in KEYWORDS:
        meta = KEYWORDS[key]
        keyboard = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", url=meta['link'])]]
        await query.edit_message_text(
            f"‚ÑπÔ∏è {meta['text']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
@session_handler
async def handle_delete(session, query, context, tracking=None, all=False):
    user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
    if not user:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if all:
        session.query(Parcel).filter_by(user_id=user.id).delete()
        session.commit()
        await query.answer("üóëÔ∏è –í—Å–µ —É–¥–∞–ª–µ–Ω–æ!")
    else:
        parcel = session.query(Parcel).filter_by(user_id=user.id, tracking_number=tracking).first()
        if parcel:
            session.delete(parcel)
            session.commit()
            await query.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ!")
        else:
            await query.answer("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
    if 'delete_menu_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data['delete_menu_id'])
        except:
            pass
    if 'my_parcels_message_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data['my_parcels_message_id'])
        except:
            pass
    if 'tracking_response_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data['tracking_response_id'])
        except:
            pass
    text, reply_markup = await get_my_parcels_content(session, user)
    new_msg = await context.bot.send_message(chat_id=query.message.chat_id, text=text, reply_markup=reply_markup, parse_mode='Markdown')
    context.user_data['my_parcels_message_id'] = new_msg.message_id
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu_keyboard())
    context.user_data.clear()
    return ConversationHandler.END
async def handle_add_tracking_menu(update, context):
    return ADD_TRACKING
def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    reg_conv = ConversationHandler(
        entry_points=[CommandHandler('register', register_cmd), CallbackQueryHandler(button_handler, pattern="^register$")],
        states={
            REGISTER_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_login_received)],
            REGISTER_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_password_received)],
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name_received)],
            REGISTER_SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_surname_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_user=True,
        per_chat=False
    )
    login_conv = ConversationHandler(
        entry_points=[CommandHandler('login', login_cmd), CallbackQueryHandler(button_handler, pattern="^login$")],
        states={
            LOGIN_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_login_received)],
            LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_user=True,
        per_chat=False
    )
    add_tracking_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(button_handler, pattern="^add_new_tracking$"),
            MessageHandler(filters.TEXT & filters.Regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä$'), handle_add_tracking_menu)
        ],
        states={
            ADD_TRACKING: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_tracking_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_user=True,
        per_chat=False
    )
    change_password_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex(r'^üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å$'), change_password_start)],
        states={
            CHANGE_OLD_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_old_password_received)],
            CHANGE_NEW_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_new_password_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_user=True,
        per_chat=False
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("profile", profile_cmd))
    app.add_handler(reg_conv)
    app.add_handler(login_conv)
    app.add_handler(add_tracking_conv)
    app.add_handler(change_password_conv)
    app.add_handler(CommandHandler("parcel", parcel_cmd))
    app.add_handler(CallbackQueryHandler(keyword_callback_handler, pattern=r"^(kw_|add_new_tracking)"))
    app.add_handler(CallbackQueryHandler(button_handler, pattern=r"^(help_guest|track_|start_delete|del_)"))
    app.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r'^(üì¶ –ü–æ—Å—ã–ª–∫–∏|üìç –¢—Ä–µ–∫–∏–Ω–≥|üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä|üåç –°–ù–ì —Å—Ç—Ä–∞–Ω—ã|‚ùì –ü–æ–º–æ—â—å|üë§ –ü—Ä–æ—Ñ–∏–ª—å|üìã –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏|‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å|üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å)$'),
        handle_menu_selection
    ))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, keyword_handler))
    print("ü§ñ Boxberry Bot –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
if __name__ == "__main__":
    main()